name: Deploy Portfolio
on:
  push:
    branches:
      - main
jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AWS_REGION: eu-central-1
      ECR_REPOSITORY: public.ecr.aws/v2w5z6p0/portfolio_docker_repository
      CONTAINER_NAME: portfolio
      CONTAINER_PORT: 3000
      HOST_PORT: 3001
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REPOSITORY }}

      - name: Build and Push Docker image
        run: |
          docker build -t $CONTAINER_NAME .
          docker tag $CONTAINER_NAME:latest $ECR_REPOSITORY:latest
          docker push $ECR_REPOSITORY:latest

      - name: Get runner IP address
        id: ip
        run: echo "IP=$(curl -s http://checkip.amazonaws.com)" >> $GITHUB_ENV

      - name: Whitelist runner IP address
        run: |
          aws ec2 authorize-security-group-ingress --group-id ${{ secrets.AWS_INSTANCE_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32

      - name: Deploy to EC2 using SSH
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ec2-user
          key: ${{ secrets.EC2_KEY }}
          script: |
            docker pull $ECR_REPOSITORY:latest
            docker stop $CONTAINER_NAME || true
            docker rm $CONTAINER_NAME || true
            docker run -d --name $CONTAINER_NAME -p $HOST_PORT:$CONTAINER_PORT $ECR_REPOSITORY:latest

      - name: Cleanup Docker images
        run: docker image prune -a --filter "until=48h" -f

      - name: Revoke runner IP address
        if: always()
        run: |
          aws ec2 revoke-security-group-ingress --group-id ${{ secrets.AWS_INSTANCE_SG_ID }} --protocol tcp --port 22 --cidr ${{ env.IP }}/32
